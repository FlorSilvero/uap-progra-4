// @ts-nocheck
import { OpenAIStream, StreamingTextResponse } from 'ai';

// Configuraci√≥n de OpenRouter
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY || '';
const OPENROUTER_BASE_URL = process.env.OPENROUTER_BASE_URL || 'https://openrouter.ai/api/v1';
const OPENROUTER_MODEL = process.env.OPENROUTER_MODEL || 'google/gemma-2-9b-it:free';

// API Route para el chat
export async function POST(req: Request) {
  console.log('üöÄ Chat API llamada recibida');
  
  try {
    console.log('üìù Parseando body del request...');
    const { messages } = await req.json();
    console.log('‚úÖ Messages recibidos:', messages.length, 'mensajes');

    console.log('üîß Configurando llamada a OpenRouter...');
    const response = await fetch(`${OPENROUTER_BASE_URL}/chat/completions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'http://localhost:3000',
        'X-Title': 'AI Todo Manager',
      },
      body: JSON.stringify({
        model: OPENROUTER_MODEL,
        messages: [
          {
            role: 'system',
            content: `Eres un asistente inteligente para gesti√≥n de tareas en espa√±ol. Ayudas a los usuarios a:
- Crear, actualizar y eliminar tareas
- Buscar y filtrar tareas seg√∫n diversos criterios
- Ver estad√≠sticas de productividad
- Organizar su d√≠a de manera eficiente

Cuando el usuario te pida crear una tarea, responde de forma amigable confirmando que la crear√≠as y explica c√≥mo hacerlo.
S√© amigable, conciso y √∫til. Usa emojis cuando sea apropiado para hacer la experiencia m√°s agradable.`
          },
          ...messages,
        ],
        stream: true,
      }),
    });

    console.log('‚úÖ Respuesta de OpenRouter recibida, status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error de OpenRouter:', errorText);
      throw new Error(`OpenRouter error: ${response.status} - ${errorText}`);
    }

    console.log('‚úÖ Creando stream...');
    const stream = OpenAIStream(response);
    console.log('‚úÖ Stream creado, enviando respuesta...');
    
    return new StreamingTextResponse(stream);
  } catch (error) {
    console.error('‚ùå ERROR en chat API:', error);
    console.error('   Stack:', error.stack);
    return new Response(JSON.stringify({ 
      error: 'Error processing request', 
      details: error.message,
      stack: error.stack 
    }), { 
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}
